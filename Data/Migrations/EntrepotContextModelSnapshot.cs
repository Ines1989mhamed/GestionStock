// <auto-generated />
using Entrepot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Entrepot.Migrations
{
    [DbContext(typeof(EntrepotContext))]
    partial class EntrepotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entrepot.Data.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse");

                    b.Property<string>("Nom");

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse");

                    b.Property<string>("Matricule");

                    b.Property<string>("Nom");

                    b.Property<string>("Prenom");

                    b.Property<string>("Tel");

                    b.Property<string>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Fiche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Nb_Ligne");

                    b.Property<int>("Num_Fiche");

                    b.Property<Guid?>("TransporteurId");

                    b.Property<string>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("TransporteurId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Fiche");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Fiche");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Fournisseur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse");

                    b.Property<string>("Designation");

                    b.Property<string>("Nom");

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.LigneProduit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<Guid?>("FicheId");

                    b.Property<Guid>("Fiche_Id");

                    b.Property<Guid?>("ProduitId");

                    b.Property<Guid>("Produit_Id");

                    b.Property<int>("Quantite");

                    b.Property<Guid?>("ReservationId");

                    b.HasKey("Id");

                    b.HasIndex("FicheId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("ReservationId");

                    b.ToTable("LigneProduits");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Produit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designation");

                    b.Property<int>("QteStock");

                    b.HasKey("Id");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("DateDeb");

                    b.Property<DateTime>("Datefin");

                    b.Property<string>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Transporteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse");

                    b.Property<string>("Nom");

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.ToTable("Transporteurs");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Voiture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Matricule");

                    b.Property<string>("designation");

                    b.HasKey("Id");

                    b.ToTable("Voitures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheEntree", b =>
                {
                    b.HasBaseType("Entrepot.Data.Entities.Fiche");

                    b.Property<Guid?>("FournisseurId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("FicheEntree");

                    b.HasDiscriminator().HasValue("FicheEntree");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheRetour", b =>
                {
                    b.HasBaseType("Entrepot.Data.Entities.Fiche");

                    b.Property<Guid?>("ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("FicheRetour");

                    b.HasDiscriminator().HasValue("FicheRetour");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheSortie", b =>
                {
                    b.HasBaseType("Entrepot.Data.Entities.Fiche");

                    b.Property<Guid?>("ClientId")
                        .HasColumnName("FicheSortie_ClientId");

                    b.Property<string>("Evennement");

                    b.HasIndex("ClientId");

                    b.ToTable("FicheSortie");

                    b.HasDiscriminator().HasValue("FicheSortie");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Employee", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Fiche", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Transporteur", "Transporteur")
                        .WithMany()
                        .HasForeignKey("TransporteurId");

                    b.HasOne("Entrepot.Data.Entities.Utilisateur", "Utilisateur")
                        .WithMany("Fiches")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.LigneProduit", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Fiche", "Fiche")
                        .WithMany("LignesProduits")
                        .HasForeignKey("FicheId");

                    b.HasOne("Entrepot.Data.Entities.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId");

                    b.HasOne("Entrepot.Data.Entities.Reservation")
                        .WithMany("LignesProduits")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.Reservation", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Entrepot.Data.Entities.Utilisateur", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Utilisateur")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Utilisateur")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entrepot.Data.Entities.Utilisateur")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Utilisateur")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheEntree", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Fournisseur", "Fournisseur")
                        .WithMany()
                        .HasForeignKey("FournisseurId");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheRetour", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Entrepot.Data.Entities.FicheSortie", b =>
                {
                    b.HasOne("Entrepot.Data.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");
                });
#pragma warning restore 612, 618
        }
    }
}
